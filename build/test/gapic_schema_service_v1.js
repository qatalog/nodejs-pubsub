"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/protos");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const schemaserviceModule = require("../src");
const stream_1 = require("stream");
const google_gax_1 = require("google-gax");
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = google_gax_1.protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName, fields) {
    var _a, _b;
    let type = root.lookupType(typeName);
    for (const field of fields.slice(0, -1)) {
        type = (_a = type.fields[field]) === null || _a === void 0 ? void 0 : _a.resolvedType;
    }
    return (_b = type.fields[fields[fields.length - 1]]) === null || _b === void 0 ? void 0 : _b.defaultValue;
}
function generateSampleMessage(instance) {
    const filledObject = instance.constructor.toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error
        ? sinon.stub().rejects(error)
        : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
}
function stubPageStreamingCall(responses, error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : pagingStub;
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => {
                mockStream.write({});
            });
        }
        setImmediate(() => {
            mockStream.end();
        });
    }
    else {
        setImmediate(() => {
            mockStream.write({});
        });
        setImmediate(() => {
            mockStream.end();
        });
    }
    return sinon.stub().returns(mockStream);
}
function stubAsyncIterationCall(responses, error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses.length) {
                        return Promise.resolve({ done: true, value: undefined });
                    }
                    return Promise.resolve({ done: false, value: responses[counter++] });
                },
            };
        },
    };
    return sinon.stub().returns(asyncIterable);
}
(0, mocha_1.describe)('v1.SchemaServiceClient', () => {
    (0, mocha_1.describe)('Common methods', () => {
        (0, mocha_1.it)('has servicePath', () => {
            const servicePath = schemaserviceModule.v1.SchemaServiceClient.servicePath;
            assert(servicePath);
        });
        (0, mocha_1.it)('has apiEndpoint', () => {
            const apiEndpoint = schemaserviceModule.v1.SchemaServiceClient.apiEndpoint;
            assert(apiEndpoint);
        });
        (0, mocha_1.it)('has port', () => {
            const port = schemaserviceModule.v1.SchemaServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });
        (0, mocha_1.it)('should create a client with no option', () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient();
            assert(client);
        });
        (0, mocha_1.it)('should create a client with gRPC fallback', () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                fallback: true,
            });
            assert(client);
        });
        (0, mocha_1.it)('has initialize method and supports deferred initialization', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.schemaServiceStub, undefined);
            await client.initialize();
            assert(client.schemaServiceStub);
        });
        (0, mocha_1.it)('has close method for the initialized client', done => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            assert(client.schemaServiceStub);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has close method for the non-initialized client', done => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.schemaServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert(client.auth.getProjectId.calledWithExactly());
        });
        (0, mocha_1.it)('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon
                .stub()
                .callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err, projectId) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });
    (0, mocha_1.describe)('createSchema', () => {
        (0, mocha_1.it)('invokes createSchema without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.CreateSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.CreateSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.pubsub.v1.Schema());
            client.innerApiCalls.createSchema = stubSimpleCall(expectedResponse);
            const [response] = await client.createSchema(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createSchema without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.CreateSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.CreateSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.pubsub.v1.Schema());
            client.innerApiCalls.createSchema =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.createSchema(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createSchema with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.CreateSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.CreateSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createSchema = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createSchema(request), expectedError);
            const actualRequest = client.innerApiCalls.createSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createSchema with closed client', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.CreateSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.CreateSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createSchema(request), expectedError);
        });
    });
    (0, mocha_1.describe)('getSchema', () => {
        (0, mocha_1.it)('invokes getSchema without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.GetSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.GetSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.pubsub.v1.Schema());
            client.innerApiCalls.getSchema = stubSimpleCall(expectedResponse);
            const [response] = await client.getSchema(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getSchema without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.GetSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.GetSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.pubsub.v1.Schema());
            client.innerApiCalls.getSchema =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getSchema(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getSchema with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.GetSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.GetSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getSchema = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSchema(request), expectedError);
            const actualRequest = client.innerApiCalls.getSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getSchema with closed client', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.GetSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.GetSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getSchema(request), expectedError);
        });
    });
    (0, mocha_1.describe)('deleteSchema', () => {
        (0, mocha_1.it)('invokes deleteSchema without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.DeleteSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.DeleteSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSchema = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSchema(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteSchema without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.DeleteSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.DeleteSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSchema =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteSchema(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteSchema with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.DeleteSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.DeleteSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSchema = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSchema(request), expectedError);
            const actualRequest = client.innerApiCalls.deleteSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteSchema with closed client', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.DeleteSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.DeleteSchemaRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteSchema(request), expectedError);
        });
    });
    (0, mocha_1.describe)('validateSchema', () => {
        (0, mocha_1.it)('invokes validateSchema without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ValidateSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ValidateSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.pubsub.v1.ValidateSchemaResponse());
            client.innerApiCalls.validateSchema = stubSimpleCall(expectedResponse);
            const [response] = await client.validateSchema(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.validateSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.validateSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes validateSchema without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ValidateSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ValidateSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.pubsub.v1.ValidateSchemaResponse());
            client.innerApiCalls.validateSchema =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.validateSchema(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.validateSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.validateSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes validateSchema with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ValidateSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ValidateSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.validateSchema = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.validateSchema(request), expectedError);
            const actualRequest = client.innerApiCalls.validateSchema.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.validateSchema.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes validateSchema with closed client', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ValidateSchemaRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ValidateSchemaRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.validateSchema(request), expectedError);
        });
    });
    (0, mocha_1.describe)('validateMessage', () => {
        (0, mocha_1.it)('invokes validateMessage without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ValidateMessageRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ValidateMessageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.pubsub.v1.ValidateMessageResponse());
            client.innerApiCalls.validateMessage = stubSimpleCall(expectedResponse);
            const [response] = await client.validateMessage(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.validateMessage.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.validateMessage.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes validateMessage without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ValidateMessageRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ValidateMessageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.pubsub.v1.ValidateMessageResponse());
            client.innerApiCalls.validateMessage =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.validateMessage(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.validateMessage.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.validateMessage.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes validateMessage with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ValidateMessageRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ValidateMessageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.validateMessage = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.validateMessage(request), expectedError);
            const actualRequest = client.innerApiCalls.validateMessage.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.validateMessage.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes validateMessage with closed client', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ValidateMessageRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ValidateMessageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.validateMessage(request), expectedError);
        });
    });
    (0, mocha_1.describe)('listSchemas', () => {
        (0, mocha_1.it)('invokes listSchemas without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ListSchemasRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ListSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
            ];
            client.innerApiCalls.listSchemas = stubSimpleCall(expectedResponse);
            const [response] = await client.listSchemas(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listSchemas.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listSchemas.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listSchemas without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ListSchemasRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ListSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
            ];
            client.innerApiCalls.listSchemas =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listSchemas(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listSchemas.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listSchemas.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listSchemas with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ListSchemasRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ListSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listSchemas = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSchemas(request), expectedError);
            const actualRequest = client.innerApiCalls.listSchemas.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listSchemas.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listSchemasStream without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ListSchemasRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ListSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
            ];
            client.descriptors.page.listSchemas.createStream =
                stubPageStreamingCall(expectedResponse);
            const stream = client.listSchemasStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listSchemas.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listSchemas, request));
            assert(client.descriptors.page.listSchemas.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listSchemasStream with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ListSchemasRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ListSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSchemas.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSchemasStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listSchemas.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listSchemas, request));
            assert(client.descriptors.page.listSchemas.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listSchemas without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ListSchemasRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ListSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
                generateSampleMessage(new protos.google.pubsub.v1.Schema()),
            ];
            client.descriptors.page.listSchemas.asyncIterate =
                stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listSchemasAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listSchemas.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.listSchemas.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listSchemas with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.pubsub.v1.ListSchemasRequest());
            const defaultValue1 = getTypeDefaultValue('.google.pubsub.v1.ListSchemasRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSchemas.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSchemasAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listSchemas.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.listSchemas.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('getIamPolicy', () => {
        (0, mocha_1.it)('invokes getIamPolicy without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.Policy());
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.iamClient.getIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes getIamPolicy without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.Policy());
            client.iamClient.getIamPolicy = sinon
                .stub()
                .callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getIamPolicy(request, expectedOptions, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.iamClient.getIamPolicy.getCall(0));
        });
        (0, mocha_1.it)('invokes getIamPolicy with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.GetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert(client.iamClient.getIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    (0, mocha_1.describe)('setIamPolicy', () => {
        (0, mocha_1.it)('invokes setIamPolicy without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.Policy());
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.iamClient.setIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes setIamPolicy without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.Policy());
            client.iamClient.setIamPolicy = sinon
                .stub()
                .callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.setIamPolicy(request, expectedOptions, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.iamClient.setIamPolicy.getCall(0));
        });
        (0, mocha_1.it)('invokes setIamPolicy with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.SetIamPolicyRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert(client.iamClient.setIamPolicy
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    (0, mocha_1.describe)('testIamPermissions', () => {
        (0, mocha_1.it)('invokes testIamPermissions without error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.TestIamPermissionsResponse());
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.iamClient.testIamPermissions
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes testIamPermissions without error using callback', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.TestIamPermissionsResponse());
            client.iamClient.testIamPermissions = sinon
                .stub()
                .callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.testIamPermissions(request, expectedOptions, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.iamClient.testIamPermissions.getCall(0));
        });
        (0, mocha_1.it)('invokes testIamPermissions with error', async () => {
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.IamProtos.google.iam.v1.TestIamPermissionsRequest());
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert(client.iamClient.testIamPermissions
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    (0, mocha_1.describe)('Path templates', () => {
        (0, mocha_1.describe)('project', () => {
            const fakePath = '/rendered/path/project';
            const expectedParameters = {
                project: 'projectValue',
            };
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.projectPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            (0, mocha_1.it)('projectPath', () => {
                const result = client.projectPath('projectValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.projectPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.projectPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('projectTopic', () => {
            const fakePath = '/rendered/path/projectTopic';
            const expectedParameters = {
                project: 'projectValue',
                topic: 'topicValue',
            };
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectTopicPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.projectTopicPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            (0, mocha_1.it)('projectTopicPath', () => {
                const result = client.projectTopicPath('projectValue', 'topicValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.projectTopicPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromProjectTopicName', () => {
                const result = client.matchProjectFromProjectTopicName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.projectTopicPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            (0, mocha_1.it)('matchTopicFromProjectTopicName', () => {
                const result = client.matchTopicFromProjectTopicName(fakePath);
                assert.strictEqual(result, 'topicValue');
                assert(client.pathTemplates.projectTopicPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('schema', () => {
            const fakePath = '/rendered/path/schema';
            const expectedParameters = {
                project: 'projectValue',
                schema: 'schemaValue',
            };
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.schemaPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.schemaPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            (0, mocha_1.it)('schemaPath', () => {
                const result = client.schemaPath('projectValue', 'schemaValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.schemaPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromSchemaName', () => {
                const result = client.matchProjectFromSchemaName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.schemaPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            (0, mocha_1.it)('matchSchemaFromSchemaName', () => {
                const result = client.matchSchemaFromSchemaName(fakePath);
                assert.strictEqual(result, 'schemaValue');
                assert(client.pathTemplates.schemaPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('snapshot', () => {
            const fakePath = '/rendered/path/snapshot';
            const expectedParameters = {
                project: 'projectValue',
                snapshot: 'snapshotValue',
            };
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.snapshotPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.snapshotPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            (0, mocha_1.it)('snapshotPath', () => {
                const result = client.snapshotPath('projectValue', 'snapshotValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.snapshotPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromSnapshotName', () => {
                const result = client.matchProjectFromSnapshotName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.snapshotPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            (0, mocha_1.it)('matchSnapshotFromSnapshotName', () => {
                const result = client.matchSnapshotFromSnapshotName(fakePath);
                assert.strictEqual(result, 'snapshotValue');
                assert(client.pathTemplates.snapshotPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('subscription', () => {
            const fakePath = '/rendered/path/subscription';
            const expectedParameters = {
                project: 'projectValue',
                subscription: 'subscriptionValue',
            };
            const client = new schemaserviceModule.v1.SchemaServiceClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.subscriptionPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.subscriptionPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            (0, mocha_1.it)('subscriptionPath', () => {
                const result = client.subscriptionPath('projectValue', 'subscriptionValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.subscriptionPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromSubscriptionName', () => {
                const result = client.matchProjectFromSubscriptionName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.subscriptionPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            (0, mocha_1.it)('matchSubscriptionFromSubscriptionName', () => {
                const result = client.matchSubscriptionFromSubscriptionName(fakePath);
                assert.strictEqual(result, 'subscriptionValue');
                assert(client.pathTemplates.subscriptionPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
    });
});
//# sourceMappingURL=gapic_schema_service_v1.js.map